import json

import vlc
from aiogram import Bot, Dispatcher, executor, types
from selenium import webdriver
from aiogram.dispatcher.filters import Text
from selenium.webdriver.common.by import By
import time
import config
import requests
from bs4 import BeautifulSoup
import sqlite3
from db import DataBase

import playsound



import lxml


bot = Bot(token=config.TOKEN,parse_mode=types.ParseMode.HTML)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)
db = DataBase('db.db')

@dp.message_handler(commands='reg',commands_prefix='!/')
async def start(message: types.Message):
    if (not db.user_exists(message.message_id)):
        await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫')
        db.add_users(message.from_user.id)
        #await bot.send_message('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    else:
        await bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')

@dp.message_handler(commands='subscribe',commands_prefix='!/')
async def start(message: types.Message):
    if (not db.update_subscribe(message.message_id)):
        db.add_subscribe(message.message_id)
        await bot.send_message(message.from_user.id, '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!')
    else:
        await bot.send_message(message.from_user.id, '–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!')



@dp.message_handler(commands='start',commands_prefix='!/')
async def start(message: types.Message):
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')
    # player =vlc.MediaPlayer('Start.mp3')
    # player.play()

    buttons = ['üìª –†–∞–¥–∏–æ','üé∂ –ú—É–∑—ã–∫–∞','–Æ—Ç—É–±','–ö–∞—Ä—Ç–∏–Ω–∫–∏']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*buttons)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=keyboard)

@dp.message_handler(Text(equals='–Æ—Ç—É–±'))
async def play_youtube(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∞')
    @dp.message_handler(content_types='text')
    async def search(message: types.Message):
        await message.answer('–ü–æ–¥–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∏...')
        driver = webdriver.Chrome('chromedriver/chromedriver.exe')
        driver.get('https://www.youtube.com/results?search_query=' + message.text)
        time.sleep(2)
        hrefs = driver.find_elements(By.ID,'video-title')
        for i in hrefs[:7]:
            name = i.text
            href = i.get_attribute('href')
            await message.answer(f'{name} - {href}')

# @dp.message_handler(commands='kurs',commands_prefix='!/')
# async def kurs(message: types.Message):
#     await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")


    # buttons = ['üìª –†–∞–¥–∏–æ','üé∂ –ú—É–∑—ã–∫–∞','–Æ—Ç—É–±','–ö–∞—Ä—Ç–∏–Ω–∫–∏']
    # keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # keyboard.add(*buttons)
    # await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=keyboard)

@dp.message_handler(Text(equals='üìª –†–∞–¥–∏–æ'))
async def play_radio(message: types.Message):
    await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")
    s = requests.Session()
    response = s.get('https://ru.hitmotop.com/radio')
    soup = BeautifulSoup(response.text, 'lxml')
    hrefs = soup.find('ul', class_='album-list muslist').find_all('div', class_='album-link')
    for i in hrefs[:10]:
        name = i.text.strip()
        href = i.get('data-url')
        await message.answer(f'{name} - {href}')


@dp.message_handler(commands='ban',commands_prefix='!/')
async def ban(message: types.Message):
    if not message.reply_to_message:
        await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
        return
    await message.bot.delete_message(chat_id=config.Chat_id, message_id= message.message_id)
    await message.bot.kick_chat_member(chat_id=config.Chat_id,user_id=message.message_id)
    await message.reply_to_message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")

def main():
    print('–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...')
    executor.start_polling(dp)


if __name__=='__main__':
    main()
